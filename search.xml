<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Redis</title>
    <url>/2022/09/16/Redis/</url>
    <content><![CDATA[<h1 id="redis"><a class="anchor" href="#redis">#</a> Redis</h1>
<ul>
<li>
<p>redis 数据模型</p>
</li>
<li>
<p>redis 整合 springboot</p>
</li>
<li>
<p>redis 的常用命令</p>
</li>
<li>
<p>redis 的相关类型操作</p>
</li>
</ul>
<h2 id="1redis简介"><a class="anchor" href="#1redis简介">#</a> 1.redis 简介</h2>
<h4 id="1数据模型"><a class="anchor" href="#1数据模型">#</a> 1. 数据模型</h4>
<p>Redis 数据模型不仅仅与关系数据库管理系统（RDBMS）不同，也不同于任何简单的 NoSQL 键 - 值数据存储系统。</p>
<p>Redis 数据类型类似于编程语言的基础数据类型，因此开发人员感觉很自然，每个数据类型都支持适『用于其类型的操作』，以最大限度发挥每种数据类型的特性。</p>
<p>受支持的数据类型包括：</p>
<ul>
<li>string（ 字符串 ）</li>
<li>hash（ 哈希 ）</li>
<li>list（ 列表 ）</li>
<li>set（ 集合 ）</li>
<li>zset（ sorted set：有序集合 ）</li>
</ul>
<h4 id="2优势"><a class="anchor" href="#2优势">#</a> 2. 优势</h4>
<p>Redis 的优势包括它的速度、对富数据类型的支持、操作的原子性，以及通用性：</p>
<ul>
<li>性能极高，它每秒可执行约 10k 个 SET 以及约 100k 个 GET 操作；</li>
<li>丰富的数据类型，Redis 对大多数开发人员已知的多数数据类型提供了原生支持，这使得各种问题得以轻松解决；</li>
<li>原子性，因为所有 Redis 操作都是原子性的，所以多个客户端会并发地访问一个 Redis 服务器器，获取相同的更新值；</li>
<li>丰富的特性，Redis 是一个多效用工具，有非常多的应用场景，包括缓存、消息队列（ Redis 原生支持发布 / 订阅 ）、短期应用程序数据据（ 比如 Web 会话 ）等</li>
</ul>
<h4 id="3通用命令简介"><a class="anchor" href="#3通用命令简介">#</a> 3. 通用命令简介</h4>
<p>Redis 的常用的基础命令有：</p>
<table>
<thead>
<tr>
<th style="text-align:left">命令</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">ping</td>
<td style="text-align:left">PING 命令来测试客户端与 Redis 的连接是否正常。 连接正常时会收到回复 PONG</td>
</tr>
<tr>
<td style="text-align:left">set / get</td>
<td style="text-align:left">使用 set 和 get 可以向 redis 设置数据、获取数据。</td>
</tr>
<tr>
<td style="text-align:left">del</td>
<td style="text-align:left">删除指定 key 的内容。</td>
</tr>
<tr>
<td style="text-align:left">Keys *</td>
<td style="text-align:left">查看当前库中所有的 key 值</td>
</tr>
</tbody>
</table>
<p>一个 Redis 实例可以包括多个数据库。不过，一个 redis 实例最多可提供 16 个数据库，而且固定了以下标从 0 到 15 作为数据库名。客户端默认连接第 0 号数据库。</p>
<h2 id="2在spring中使用redis"><a class="anchor" href="#2在spring中使用redis">#</a> 2. 在 spring 中使用 redis</h2>
<h4 id="step1依赖的准备"><a class="anchor" href="#step1依赖的准备">#</a> step1: 依赖的准备</h4>
<p>Spring Boot 提供了对 Redis 集成的组件包：<strong>spring-boot-starter-data-redis</strong>，它依赖于 <strong>spring-data-redis</strong> 和 <strong>lettuce</strong> 。</p>
<p>Spring Data Redis 的底层驱动有 2 种选择， 1.x 时代用的是 Jedis ，2.x 时代换成了 Lettuce 。</p>
<h6 id="方式一jedis"><a class="anchor" href="#方式一jedis">#</a> 方式一：Jedis</h6>
<pre><code class="language-pom">&lt;dependency&gt;
  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
  &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;
  &lt;exclusions&gt; &lt;!-- 从依赖关系中排除 --&gt;
    &lt;exclusion&gt;
      &lt;groupId&gt;io.lettuce&lt;/groupId&gt;
      &lt;artifactId&gt;lettuce-core&lt;/artifactId&gt;
    &lt;/exclusion&gt;
  &lt;/exclusions&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;redis.clients&lt;/groupId&gt;
  &lt;artifactId&gt;jedis&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>
<h6 id="方式二-lettuce"><a class="anchor" href="#方式二-lettuce">#</a> 方式二: lettuce</h6>
<pre><code class="language-pom">&lt;dependency&gt;
  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
  &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;
&lt;/dependency&gt;
            &lt;!-- lettuce 依赖于 commons-pool2 。但是不知道为什么，
                 它又不在 lettuce 的依赖关系中。所以要手动引入。--&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;
  &lt;artifactId&gt;commons-pool2&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>
<h4 id="step2application配置"><a class="anchor" href="#step2application配置">#</a> Step2:application 配置</h4>
<figure class="highlight properties"><figcaption data-lang=".properties"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token key attr-name">spring.redis.host</span><span class="token punctuation">=</span><span class="token value attr-value">localhost # 默认值就是 localhost</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token key attr-name">spring.redis.port</span><span class="token punctuation">=</span><span class="token value attr-value">6379      # 默认值就是 6379</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token key attr-name">spring.redis.database</span><span class="token punctuation">=</span><span class="token value attr-value">0     # 默认值就是 0</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token key attr-name">spring.redis.password</span><span class="token punctuation">=</span>      <span class="token value attr-value"># 默认值就是空</span></pre></td></tr></table></figure><figure class="highlight yml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token key atrule">spring</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  		<span class="token key atrule">redis</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        	<span class="token key atrule">database</span><span class="token punctuation">:</span> <span class="token number">1</span>   <span class="token comment">#连接几号数据库</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        	<span class="token key atrule">host</span><span class="token punctuation">:</span> 127.0.0.1</pre></td></tr><tr><td data-num="5"></td><td><pre>        	<span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span></pre></td></tr></table></figure><h2 id="3-spring-data-redis"><a class="anchor" href="#3-spring-data-redis">#</a> 3、Spring Data Redis</h2>
<p>Spring Data Redis 针对 api 进行了重新归类与封装，将同一类型的操作封装为 <strong>Operation</strong> 接口：</p>
<table>
<thead>
<tr>
<th style="text-align:left">专有操作</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">ValueOperations</td>
<td style="text-align:left">string 类型的数据操作</td>
</tr>
<tr>
<td style="text-align:left">HashOperations</td>
<td style="text-align:left">map 类型的数据操作</td>
</tr>
<tr>
<td style="text-align:left">ListOperations</td>
<td style="text-align:left">list 类型的数据操作</td>
</tr>
<tr>
<td style="text-align:left">SetOperations</td>
<td style="text-align:left">set 类型数据操作</td>
</tr>
<tr>
<td style="text-align:left">ZSetOperations</td>
<td style="text-align:left">zset 类型数据操作</td>
</tr>
</tbody>
</table>
<h4 id="redis的相关类型操作"><a class="anchor" href="#redis的相关类型操作">#</a> redis 的相关类型操作</h4>
<h5 id="string"><a class="anchor" href="#string">#</a> String</h5>
]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>Vue基础</title>
    <url>/2023/02/11/Vue%20%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="vue基础"><a class="anchor" href="#vue基础">#</a> Vue 基础</h1>
<h2 id="vue快速起步"><a class="anchor" href="#vue快速起步">#</a> Vue 快速起步</h2>
<h3 id="1-入门示例"><a class="anchor" href="#1-入门示例">#</a> (1) 入门示例</h3>
<figure class="highlight txt"><figcaption data-lang="txt"></figcaption><table><tr><td data-num="1"></td><td><pre>body中,设置Vue管理的视图&lt;div id="app">&lt;/div></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre> 引入vue.js</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre> 实例化Vue对象 new Vue();</pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre> 设置Vue实例的选项:如el、data...   </pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>  new Vue(&#123;选项:值&#125;);</pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>  在&lt;div id='app'>&lt;/div>中通过使用data中的数据</pre></td></tr></table></figure><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token comment">&lt;!-- 引入 vue.js 库 --></span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/vue-2.6.12.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="12"></td><td><pre>     <span class="token comment"></span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></pre></td></tr><tr><td data-num="16"></td><td><pre>     <span class="token comment">// 创建 Vue 实例对象</span></pre></td></tr><tr><td data-num="17"></td><td><pre>     <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>  <span class="token comment">//Element 元素，表示当前 VM 管理的视图区</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            <span class="token literal-property property">msg</span> <span class="token operator">:</span> <span class="token string">"Hello,欢迎学习VueJS!"</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>     <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><h3 id="2-vue实例的选项"><a class="anchor" href="#2-vue实例的选项">#</a> (2) Vue 实例的选项</h3>
<p><strong>el</strong></p>
<figure class="highlight txt"><figcaption data-lang="txt"></figcaption><table><tr><td data-num="1"></td><td><pre>作用:当前Vue实例所管理的html视图</pre></td></tr><tr><td data-num="2"></td><td><pre> 值:通常是id选择器(或者是一个 HTMLElement 实例)</pre></td></tr><tr><td data-num="3"></td><td><pre> 不要让el所管理的视图是html或者body</pre></td></tr></table></figure><p><strong>data</strong></p>
<figure class="highlight txt"><figcaption data-lang="txt"></figcaption><table><tr><td data-num="1"></td><td><pre>Vue 实例的数据对象，是响应式数据(数据驱动视图)</pre></td></tr><tr><td data-num="2"></td><td><pre> 可以通过 vm.$data 访问原始数据对象</pre></td></tr><tr><td data-num="3"></td><td><pre>console.log(vm.$data.msg); 等价于 console.log(vm.msg);</pre></td></tr></table></figure><p><strong>methods</strong></p>
<figure class="highlight txt"><figcaption data-lang="txt"></figcaption><table><tr><td data-num="1"></td><td><pre>其值为可以一个对象</pre></td></tr><tr><td data-num="2"></td><td><pre> 可以直接通过 VM 实例访问这些方法，或者在指令表达式中使用</pre></td></tr><tr><td data-num="3"></td><td><pre>    //直接通过vm实例访问方法</pre></td></tr><tr><td data-num="4"></td><td><pre>     vm.func1();</pre></td></tr><tr><td data-num="5"></td><td><pre>     或</pre></td></tr><tr><td data-num="6"></td><td><pre>      &lt;button type="button" v-on:click="func1">我是按钮&lt;/button></pre></td></tr></table></figure><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token comment">&lt;!-- 引入 vue.js 库 --></span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/vue-2.6.12.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="12"></td><td><pre>     <span class="token comment"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="13"></td><td><pre>     <span class="token comment"></span> - <span class="token comment"></span> - <span class="token comment"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="14"></td><td><pre>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>func1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="16"></td><td><pre> </pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></pre></td></tr><tr><td data-num="19"></td><td><pre>     <span class="token comment">// 创建 Vue 实例对象</span></pre></td></tr><tr><td data-num="20"></td><td><pre>     <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>  <span class="token comment">//Element 元素，表示当前 VM 管理的视图区 不能指定为 body 或 html</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>      <span class="token comment">//vm 访问的 model 对象</span></pre></td></tr><tr><td data-num="23"></td><td><pre>             <span class="token literal-property property">msg</span> <span class="token operator">:</span> <span class="token string">"Hello,欢迎学习VueJS!"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            <span class="token literal-property property">stu</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token literal-property property">sname</span><span class="token operator">:</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token literal-property property">sage</span><span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>            <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 此时方法中的 this 表示当前 vm 实例</span></pre></td></tr><tr><td data-num="29"></td><td><pre>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="31"></td><td><pre>            <span class="token function-variable function">func2</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'func2()'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="34"></td><td><pre>            <span class="token function-variable function">func3</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 箭头函数中的 this 表示的是 window 顶层对象，并不是 vm</span></pre></td></tr><tr><td data-num="36"></td><td><pre>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 当前窗口中的 vm 对象</span></pre></td></tr><tr><td data-num="37"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>     <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre></pre></td></tr><tr><td data-num="41"></td><td><pre>     </pre></td></tr><tr><td data-num="42"></td><td><pre>     <span class="token comment">// 直接通过 vm 实例访问方法</span></pre></td></tr><tr><td data-num="43"></td><td><pre>     vm<span class="token punctuation">.</span><span class="token function">func3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>$data<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><h3 id="3-术语解释"><a class="anchor" href="#3-术语解释">#</a> (3) 术语解释</h3>
<p>a. 插值表达式</p>
<p></p>
<p>|- 动态呈现 data 中的数据，实现显示 [只要 data 中的数据改变，插值表达式会动态显示]</p>
<p>通过任何方式修改所绑定的数据，所显示的数据都会被实时替换</p>
<p></p>
<p><strong>不能写 JS 语句，如：var a=10; 分支语句 循环语句</strong></p>
<pre><code>  &lt;div id=&quot;app&quot;&gt;
     &#123;&#123;msg.split(",")&#125;&#125;&lt;br&gt;
     &#123;&#123;'是否成年:'+(age>=18 ? '成年' : '未成年')&#125;&#125; &lt;br&gt;&lt;br&gt;
     年龄+1: &#123;&#123;age&#125;&#125;&lt;br&gt;&lt;br&gt;
     &#123;&#123;stu.id&#125;&#125; - &#123;&#123;stu.sname&#125;&#125; - &#123;&#123;stu.sage&#125;&#125;&lt;br&gt;&lt;br&gt;       
  &lt;/div&gt;
</code></pre>
<p>b. 指令 directive</p>
<p>都是以 v- 开头</p>
<p>l 指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM</p>
<p>v-on 指令就是给标签绑定事件</p>
<pre><code>|- 一般使用缩写式:  @
</code></pre>
<figure class="highlight txt"><figcaption data-lang="txt"></figcaption><table><tr><td data-num="1"></td><td><pre>v-on:事件</pre></td></tr><tr><td data-num="2"></td><td><pre>  |- </pre></td></tr><tr><td data-num="3"></td><td><pre>  例：v-on:click  --@click</pre></td></tr><tr><td data-num="4"></td><td><pre>     v-on:blur</pre></td></tr><tr><td data-num="5"></td><td><pre>     ...</pre></td></tr></table></figure><h2 id="vue-基础指令"><a class="anchor" href="#vue-基础指令">#</a> Vue 基础指令</h2>
<p>常用指令有 v-for (用于循环遍历) 、v-if 、v-text、v-bind、v-on 等</p>
<h3 id="a-v-text和-v-html"><a class="anchor" href="#a-v-text和-v-html">#</a> a. v-text 和 v-html</h3>
<p>很像 innerText 和 innerHTML</p>
<p>首先，说明 v-text 与插值表达式区别:</p>
<figure class="highlight txt"><figcaption data-lang="txt"></figcaption><table><tr><td data-num="1"></td><td><pre>v-text 更新整个标签中的内容</pre></td></tr><tr><td data-num="2"></td><td><pre>插值表达式: 更新标签中局部的内容</pre></td></tr></table></figure><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这是一个段落!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这是一个段落,部份使用插值: <span class="token comment"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这是一个段落!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token comment">// 创建 Vue 实例对象 </span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span> </pre></td></tr><tr><td data-num="13"></td><td><pre>            <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>     </pre></td></tr><tr><td data-num="14"></td><td><pre>                <span class="token literal-property property">msg</span><span class="token operator">:</span><span class="token string">'&lt;font color="red">hello&lt;/font>'</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><h3 id="b-v-bind-绑定指令单向绑定"><a class="anchor" href="#b-v-bind-绑定指令单向绑定">#</a> b. v-bind 绑定指令 (单向绑定)</h3>
<p>可以绑定标签上的任何属性，可以使用得属性读取 vue 实例中的 data 中数据</p>
<p>比如：</p>
<figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  访问data中的img属性</pre></td></tr><tr><td data-num="2"></td><td><pre>通常使用简写  : </pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment">&lt;!-- v-bind 和：等价 --></span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span>  <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>changePic<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>改变图片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token comment">// 创建 Vue 实例对象 </span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>           <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span> </pre></td></tr><tr><td data-num="16"></td><td><pre>           <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>     </pre></td></tr><tr><td data-num="17"></td><td><pre>              <span class="token literal-property property">img</span><span class="token operator">:</span><span class="token string">'images/angel.gif'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="18"></td><td><pre>              <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'Jack'</span></pre></td></tr><tr><td data-num="19"></td><td><pre>           <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="20"></td><td><pre>           <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>                <span class="token function">changePic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>                    <span class="token keyword">this</span><span class="token punctuation">.</span>img<span class="token operator">=</span><span class="token string">'images/dog1.jpg'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>           <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>   </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><h3 id="c-v-model-双向绑定"><a class="anchor" href="#c-v-model-双向绑定">#</a> c. v-model (双向绑定)</h3>
<p>v-model 是 Vue 框架的一种内置的 API 指令，本质是一种语法糖写法。它负责监听用户的输入事件以更新数据，并对一些极端场景进行一些特殊处理。</p>
<p><strong>v-model 的原理 (v-model 双向绑定等于 v-bind 和 v-on)</strong></p>
<p>官方有说到，v-model 的原理其实是背后有两个操作：</p>
<ol>
<li>v-bind 绑定 value 属性的值；</li>
<li>v-on 绑定 input 事件监听到函数中，函数会获取最新的值赋值到绑定的属性中；</li>
<li>如果我们在 v-model 后跟上<strong> lazy</strong> 修饰符 (<strong>v-model.lazy</strong>)，那么会将绑定的事件切换为 change 事件，只有在提交时（比如回车）才会触发</li>
<li>v-model 后更上 trim 修饰符就能去除两边空格，v-model 后跟上 number 修饰符就能将内容当成数字处理</li>
</ol>
<pre><code class="language-vue">  &lt;!DOCTYPE html&gt;
  &lt;html&gt;
  &lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot;&gt;
  &lt;script src=&quot;https://cdn.staticfile.org/vue/3.2.36/vue.global.min.js&quot;&gt;&lt;/script&gt;
  &lt;/head&gt;
  &lt;body&gt;
  &lt;div id=&quot;app&quot;&gt;
      &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;
      &lt;input v-model=&quot;message&quot;&gt;
  &lt;/div&gt;
  
  &lt;script&gt;
  const app = &#123;
    data() &#123;
      return &#123;
        message: 'legend!'
      &#125;
    &#125;
  &#125;
  
  Vue.createApp(app).mount('#app')
  &lt;/script&gt;
  &lt;/body&gt;
  &lt;/html&gt;
</code></pre>
<h3 id="d-v-on-注册事件指令"><a class="anchor" href="#d-v-on-注册事件指令">#</a> d. v-on 注册事件指令</h3>
<figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token comment">&lt;!-- 可以直接在 v-on 属性值中编写表达式 --></span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>增加1<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>count+=1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment"></span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="7"></td><td><pre>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>增加1<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>count+=1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="8"></td><td><pre>     <span class="token comment"></span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="10"></td><td><pre>     <span class="token comment">&lt;!-- 执行一个方法、这种写法可以传形参，特殊的形参 $event --></span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>增加1<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add($event)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment"></span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token comment">&lt;!-- 执行一个方法、这种写法可以传形参，特殊的形参 $event --></span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>增加1<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add($event)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment"></span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token comment">// 创建 Vue 实例对象 </span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>            <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>                <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>evt<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//evt 通过 $event 传入，表示事件发生时的状态信息</span></pre></td></tr><tr><td data-num="31"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><h3 id="ev-for-循环语句"><a class="anchor" href="#ev-for-循环语句">#</a> e.v-for 循环语句</h3>
<pre><code>div id=&quot;app&quot;&gt;
  &lt;ol&gt;
    &lt;li v-for=&quot;(site, index) in sites&quot;&gt;
      &#123;&#123; index &#125;&#125; -&#123;&#123; site.text &#125;&#125;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
&lt;script&gt;
const app = &#123;
  data() &#123;
    return &#123;
      sites: [
        &#123; text: 'Google' &#125;,
        &#123; text: 'Runoob' &#125;,
        &#123; text: 'Taobao' &#125;
      ]
    &#125;
  &#125;
&#125;

Vue.createApp(app).mount('#app')
&lt;/script&gt;
</code></pre>
<h2 id="vue-生命周期"><a class="anchor" href="#vue-生命周期">#</a> Vue 生命周期</h2>
<p><strong>Vue 的生命周期就是 vue 实例从创建到销毁的全过程，也就是 new Vue () 开始就是 vue 生命周期的开始。</strong></p>
<p>&lt;img src=&quot;<span class="exturl" data-url="aHR0cHM6Ly93d3cud3VjcS50b3AvZi83TklFL3Z1ZS1saWZlJTIwQ3ljbGUucG5n">https://www.wucq.top/f/7NIE/vue-life Cycle.png</span>&quot; alt=&quot;vue-life Cycle&quot; style=&quot;zoom:50%;&quot; /&gt;</p>
<p>共有 8 个生命周期 钩子函数</p>
<h4 id="1-创建期间的生命周期函数"><a class="anchor" href="#1-创建期间的生命周期函数">#</a> (1) 创建期间的生命周期函数</h4>
<figure class="highlight txt"><figcaption data-lang="txt"></figcaption><table><tr><td data-num="1"></td><td><pre>	beforeCreate：实例刚在内存中被创建出来，此时，还没有初始化好 data 和 methods 属性</pre></td></tr><tr><td data-num="2"></td><td><pre>	created：实例已经在内存中创建OK，此时 data 和 methods 已经创建OK，此时还没有开始 编译模板</pre></td></tr><tr><td data-num="3"></td><td><pre>	beforeMount：此时已经完成了模板的编译，但是还没有挂载到页面中</pre></td></tr><tr><td data-num="4"></td><td><pre>	mounted：此时，已经将编译好的模板，挂载到了页面指定的容器中显示</pre></td></tr></table></figure><h4 id="2-运行期间的生命周期函数"><a class="anchor" href="#2-运行期间的生命周期函数">#</a> (2) 运行期间的生命周期函数</h4>
<figure class="highlight txt"><figcaption data-lang="txt"></figcaption><table><tr><td data-num="1"></td><td><pre>	beforeUpdate：状态更新之前执行此函数， 此时 data 中的状态值是最新的，但是界面上显示的 数据还是旧的，因为此时还没有开始重新渲染DOM节点</pre></td></tr><tr><td data-num="2"></td><td><pre>	updated：实例更新完毕之后调用此函数，此时 data 中的状态值 和 界面上显示的数据，都已经完成了更新，界面已经被重新渲染好了</pre></td></tr></table></figure><h4 id="3-销毁期间的生命周期函数"><a class="anchor" href="#3-销毁期间的生命周期函数">#</a> (3) 销毁期间的生命周期函数</h4>
<figure class="highlight txt"><figcaption data-lang="txt"></figcaption><table><tr><td data-num="1"></td><td><pre>	beforeDestroy：实例销毁之前调用。在这一步，实例仍然完全可用。</pre></td></tr><tr><td data-num="2"></td><td><pre>	destroyed：Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。</pre></td></tr></table></figure><h5 id="举个栗子"><a class="anchor" href="#举个栗子">#</a> <strong>举个栗子:</strong></h5>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;title&gt;Document&lt;/title&gt;
    &lt;!-- 引入vuejs --&gt;
    &lt;script src=&quot;js/vue-2.6.12.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div id=&quot;app&quot;&gt;
        &lt;p id=&quot;p&quot;&gt;&#123;&#123;msg&#125;&#125;&lt;/p&gt;
        &lt;input type=&quot;text&quot; v-model=&quot;msg&quot; /&gt;
    &lt;/div&gt;
    
   
     &lt;script&gt;
        // 创建Vue实例对象 
        var vm = new Vue(&#123;
           el:'#app', 
           data:&#123;     
              msg:'hello'
           &#125;,
           methods:&#123;
               printMsg()&#123;
                   console.log(&quot;printMsg()执行了...&quot;);
               &#125;
           &#125;,
           beforeCreate() &#123;//实例刚在内存中被创建出来，此时，还没有初始化好 data 和 methods 属性
                console.log(&quot;beforeCreated()执行了...&quot;);
                console.log(this.msg); //undefined
                this.printMsg(); //未定义
           &#125;,
           created() &#123;//实例已经在内存中创建OK，此时 data 和 methods 已经创建OK，此时还没有开始 编译模板
               console.log(&quot;created()执行了....&quot;);
               console.log(this.msg); 
               this.printMsg();
               console.log(&quot;访问模板元素:&quot;+document.getElementById(&quot;p&quot;).innerText); //&#123;&#123;msg&#125;&#125;
           &#125;,
           beforeMount() &#123;  //此时已经完成了模板的编译，但是还没有挂载到页面中
              console.log(&quot;beforeMount()执行了....&quot;);
               console.log(this.msg); 
               this.printMsg();
               console.log(&quot;访问模板元素:&quot;+document.getElementById(&quot;p&quot;).innerText); //&#123;&#123;msg&#125;&#125;
           &#125;,
            mounted() &#123;  //已经将编译好的模板，挂载到了页面指定的容器中显示
              console.log(&quot;mounted()执行了....&quot;);
               console.log(this.msg); 
               this.printMsg();
               console.log(&quot;访问模板元素:&quot;+document.getElementById(&quot;p&quot;).innerText); //&#123;&#123;msg&#125;&#125;
           &#125;,
           beforeUpdate() &#123; //状态更新之前执行此函数， 此时 data 中的状态值是最新的，但是界面上显示的 数据还是旧的
              console.log(&quot;beforeUpdate()执行了....&quot;);
              console.log(this.msg);  //data中的
              console.log(&quot;访问模板元素:&quot;+document.getElementById(&quot;p&quot;).innerText);
           &#125;,
           updated() &#123; //实例更新完毕之后调用此函数，此时 data 中的状态值 和 界面上显示的数据，都已经完成了更新
            console.log(&quot;updated()执行了....&quot;);
              console.log(this.msg); 
              console.log(&quot;访问模板元素:&quot;+document.getElementById(&quot;p&quot;).innerText);
           &#125;,
            beforeDestroy() &#123; //实例销毁之前调用。在这一步，实例仍然完全可用
             console.log(&quot;destroy()执行了....&quot;);
             console.log(this.msg); 
           &#125;,
           destroyed() &#123;  //Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁
             console.log(&quot;destroyed()执行了....&quot;);
             console.log(this.msg);  // 此时将不能再引用vm实例
           &#125;,
        &#125;);
   &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Security 认证鉴权(一)</title>
    <url>/2022/09/06/springsecurity/</url>
    <content><![CDATA[<h1 id="安全框架"><a class="anchor" href="#安全框架">#</a> 安全框架</h1>
<ul>
<li>
<p>SpringSecurity 鉴权 - [重点]</p>
</li>
<li>
<p>SpringSecurity 整合 JWT - [重点]</p>
</li>
<li>
<p>SpringSecurity 注销成功的处理</p>
</li>
</ul>
<h1 id="1springsecurity-鉴权"><a class="anchor" href="#1springsecurity-鉴权">#</a> 1.SpringSecurity 鉴权</h1>
<ul>
<li>RBAC 基于角色访问控制</li>
</ul>
<figure class="highlight txt"><figcaption data-lang="txt"></figcaption><table><tr><td data-num="1"></td><td><pre>Role-Based Access Control</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>组成部分:</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>RBAC模型里面，有3个基础组成部分，分别是：用户user、角色role 和 权限permssion</pre></td></tr><tr><td data-num="6"></td><td><pre>User（用户）：每个用户都有唯一的UID识别，并被授予不同的角色</pre></td></tr><tr><td data-num="7"></td><td><pre>Role（角色）：不同角色具有不同的权限</pre></td></tr><tr><td data-num="8"></td><td><pre>Permission（权限）：访问权限</pre></td></tr><tr><td data-num="9"></td><td><pre>用户-角色映射：用户和角色之间的映射关系</pre></td></tr><tr><td data-num="10"></td><td><pre>角色-权限映射：角色和权限之间的映射</pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>-- 基于资源(权限)  细粒  用户-权限</pre></td></tr><tr><td data-num="15"></td><td><pre>SELECT p.* FROM rbac_perms p INNER JOIN rbac_user_perm up ON p.id=up.permid</pre></td></tr><tr><td data-num="16"></td><td><pre>                             INNER JOIN rbac_user u ON u.id=up.userid</pre></td></tr><tr><td data-num="17"></td><td><pre>                             WHERE u.username='zhangsan'</pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>-- 基于角色   粗粒度  用户-角色-权限</pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre>SELECT p.* FROM rbac_perms p INNER JOIN rbac_role_perm rp ON p.id=rp.permid</pre></td></tr><tr><td data-num="22"></td><td><pre>                           INNER JOIN rbac_user_role ur ON rp.roleid=ur.roleid</pre></td></tr><tr><td data-num="23"></td><td><pre>                           INNER JOIN rbac_user u ON  u.id=ur.userid</pre></td></tr><tr><td data-num="24"></td><td><pre>                           WHERE u.username='zhangsan'</pre></td></tr></table></figure><ul>
<li>
<p>配置类注解</p>
<p>step1: 在配置类上添加 @EnableWebSecurity</p>
<p>step2: 配置类上添加 @EnableGlobalMethodSecurity 指定 scecurity 鉴权时使用的是哪一套注解</p>
<p>Spring Security 支持三套注解：</p>
<table>
<thead>
<tr>
<th style="text-align:left">jsr250 注解</th>
<th style="text-align:left">@DenyAll、@PermitAll、@RolesAllowed</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">secured 注解</td>
<td style="text-align:left">@Secured</td>
</tr>
<tr>
<td style="text-align:left"><strong>prePost 注解</strong></td>
<td style="text-align:left">@PreAuthorize、@PostAuthorize</td>
</tr>
</tbody>
</table>
</li>
</ul>
<p><strong>实现步骤:</strong></p>
<p>(1) 在配置类上添加注解配置</p>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token annotation punctuation">@EnableWebSecurity</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">//@EnableGlobalMethodSecurity (jsr250Enabled = true)  // 开启 Security 注解鉴权</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">//@EnableGlobalMethodSecurity(securedEnabled = true)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token annotation punctuation">@EnableGlobalMethodSecurity</span><span class="token punctuation">(</span>prePostEnabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token comment">//sprintSecurity 自带 可以支持 Spring EL 表达式</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>(2) 在控制器方法上使用注解，表示必须拥有该注解标识的权限才能访问</p>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token annotation punctuation">@RestController</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token annotation punctuation">@Autowired</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/userList"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token comment">// 一旦使用此注解，表示请求该方法的用户权限集里必须该权限标识符</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token comment">//@RolesAllowed ("ROLE_teacher:list")  // 访问到数据库表中的权限标识符必须以 ROLE_开头，注解上的 ROLE_可以省略</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token comment">//@Secured ("ROLE_teacher:list") // 访问到数据库表中的权限标识符必须以 ROLE_开头 注解上的 ROLE_不能省略</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token comment">//@PreAuthorize ("hasAnyAuthority ('teacher:list')") // 使用 hashAnyAuthority EL 表达式，可以指定权限标识，不要求使用 ROL_ 开头</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token comment">//@PreAuthorize ("hasAnyRole ('ROLE_teacher:list')") // 使用 hashAnyROLE EL 表达式，可以指定权限标识，要求使用 ROL_ 开头，数据库表中的权限标识也必须以 ROLE 开头</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token annotation punctuation">@PreAuthorize</span><span class="token punctuation">(</span><span class="token string">"hasRole('ROLE_teacher:list')"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">queryUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul>
<li>权限不足的处理方案</li>
</ul>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="2"></td><td><pre> * 权限不足的处理</pre></td></tr><tr><td data-num="3"></td><td><pre> */</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token annotation punctuation">@Component</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAccessDeniedHandler</span> <span class="token keyword">implements</span> <span class="token class-name">AccessDeniedHandler</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">AccessDeniedException</span> e<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token class-name">ResponseResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token class-name">ResponseResult</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">ResultCode</span><span class="token punctuation">.</span><span class="token constant">NO_PERMISSION</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token class-name">PrintWriter</span> out<span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将对象转 json 输出</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>配置类</p>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre>http<span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">,</span> <span class="token string">"/login.html"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment">// 设置登陆页、登录表单 form 中 action 的地址，也就是处理认证请求的路径</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loginPage</span><span class="token punctuation">(</span><span class="token string">"/login.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loginProcessingUrl</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token comment">// 登录表单 form 中密码输入框 input 的 name 名，不修改的话默认是 password</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">.</span><span class="token function">usernameParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">passwordParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token comment">// 登录认证成功后默认转跳的路径</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token comment">//.defaultSuccessUrl("/home")</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token comment">// 前后端分离认证成功的处理器 - 输出 json</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">.</span><span class="token function">successHandler</span><span class="token punctuation">(</span>myAuthenticationSuccessHandler<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token comment">// 前后端分离认证失败的处理器 - 输出 json</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">.</span><span class="token function">failureHandler</span><span class="token punctuation">(</span>myAuthenticationFailureHandler<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token comment">// 前后端分离处理未登录请求</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">.</span><span class="token function">exceptionHandling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticationEntryPoint</span><span class="token punctuation">(</span>myAuthenticationEntryPoint<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token comment">// 前后端分离处理权限不足的请求</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token punctuation">.</span><span class="token function">accessDeniedHandler</span><span class="token punctuation">(</span>myAccessDeniedHandler<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token comment">//.failureUrl("/error1").permitAll();</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">// 关闭 CSRF 跨域攻击防御</span></pre></td></tr><tr><td data-num="21"></td><td><pre>http<span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h1 id="2springsecurity整合jwt-重点"><a class="anchor" href="#2springsecurity整合jwt-重点">#</a> 2.SpringSecurity 整合 JWT - [重点]</h1>
<h2 id="2-1-jwt概述"><a class="anchor" href="#2-1-jwt概述">#</a> 2-1 JWT 概述</h2>
<ul>
<li>有状态与无状态比较</li>
</ul>
<figure class="highlight txt"><figcaption data-lang="txt"></figcaption><table><tr><td data-num="1"></td><td><pre>有状态服务，即服务端需要记录每次会话的客户端信息，从而识别客户端身份</pre></td></tr><tr><td data-num="2"></td><td><pre>有状态缺点是什么？</pre></td></tr><tr><td data-num="3"></td><td><pre>    - 服务端保存大量数据，增加服务端压力</pre></td></tr><tr><td data-num="4"></td><td><pre>    - 服务端保存用户状态，无法进行水平扩展</pre></td></tr><tr><td data-num="5"></td><td><pre>    - 客户端请求依赖服务端，多次请求必须访问同一台服务器</pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>服务器不需要记录客户端的状态信息:</pre></td></tr><tr><td data-num="8"></td><td><pre>无状态服务器优点:</pre></td></tr><tr><td data-num="9"></td><td><pre>    - 客户端请求不依赖服务端的信息，任何多次请求不需要必须访问到同一台服务</pre></td></tr><tr><td data-num="10"></td><td><pre>    - 服务端的集群和状态对客户端透明</pre></td></tr><tr><td data-num="11"></td><td><pre>    - 服务端可以任意的迁移和伸缩</pre></td></tr><tr><td data-num="12"></td><td><pre>    - 减小服务端存储压力</pre></td></tr></table></figure><ul>
<li>无状态登录流程</li>
</ul>
<figure class="highlight txt"><figcaption data-lang="txt"></figcaption><table><tr><td data-num="1"></td><td><pre>(1) 当客户端第一次请求服务时，服务端对用户进行信息认证（登录）</pre></td></tr><tr><td data-num="2"></td><td><pre>(2) 认证通过，将用户信息进行加密形成token字符串 [自我描述信息]</pre></td></tr><tr><td data-num="3"></td><td><pre>(3) 将生成token串发送到客户端</pre></td></tr><tr><td data-num="4"></td><td><pre>(4) 以后每次请求，客户端都携带认证的token </pre></td></tr><tr><td data-num="5"></td><td><pre>(5) 服务的对token进行解密，判断是否有效。</pre></td></tr></table></figure><ul>
<li>JWT 的 Token 串生成</li>
</ul>
<p>JWT 全称是 Json Web Token   是 JSON 风格轻量级的授权和身份认证规范</p>
<p>JWT 的 Token 串由三部分组成</p>
<ul>
<li>header    头信息 - 采用 base64 编码生成 -- 类型与生成时间</li>
<li>Payload     载荷 - 用户身份信息，过期时间，签发人  - 采用 base64 编码</li>
<li>Signature   签名 是整个数据的认证信息 - header+Payload + 密钥 secret-RSA 非对称加密技术生成</li>
</ul>
<p>使用 JWT 实现服务端交互流程:</p>
<figure class="highlight txt"><figcaption data-lang="txt"></figcaption><table><tr><td data-num="1"></td><td><pre>- 1、用户登录</pre></td></tr><tr><td data-num="2"></td><td><pre>- 2、服务的认证，通过后根据secret生成token</pre></td></tr><tr><td data-num="3"></td><td><pre>- 3、将生成的token返回给浏览器</pre></td></tr><tr><td data-num="4"></td><td><pre>- 4、用户每次请求携带token --header 通过客户端的请求头发送token串</pre></td></tr><tr><td data-num="5"></td><td><pre>- 5、服务端利用公钥解读jwt签名，判断签名有效后，从Payload中获取用户信息</pre></td></tr><tr><td data-num="6"></td><td><pre>- 6、处理请求，返回响应结果</pre></td></tr></table></figure><h2 id="2-2-实现生成token"><a class="anchor" href="#2-2-实现生成token">#</a> 2-2 实现生成 token</h2>
<ul>
<li>添加依赖 jar</li>
</ul>
<figure class="highlight xml"><figcaption data-lang="XML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">&lt;!-- 用于生成 JWT 依赖 --></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.jsonwebtoken<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jjwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.9.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.auth0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>java-jwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.8.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><ul>
<li>编写工具类 JwtTokenUtil 并测试</li>
</ul>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtTokenUtil</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="3"></td><td><pre>     * 过期时间 50 分钟</pre></td></tr><tr><td data-num="4"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token constant">EXPIRE_TIME</span> <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">10000</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="7"></td><td><pre>     * jwt 密钥</pre></td></tr><tr><td data-num="8"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SECRET</span> <span class="token operator">=</span> <span class="token string">"password"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token comment">/*</pre></td></tr><tr><td data-num="12"></td><td><pre>       生成签名  50 分钟过期</pre></td></tr><tr><td data-num="13"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">createSign</span><span class="token punctuation">(</span><span class="token class-name">String</span> userName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            <span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token constant">EXPIRE_TIME</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            <span class="token class-name">Algorithm</span> algorithm <span class="token operator">=</span> <span class="token class-name">Algorithm</span><span class="token punctuation">.</span><span class="token function">HMAC256</span><span class="token punctuation">(</span><span class="token constant">SECRET</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            <span class="token keyword">return</span> <span class="token constant">JWT</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>                    <span class="token comment">// 将 user id 保存到 token 里面</span></pre></td></tr><tr><td data-num="20"></td><td><pre>                    <span class="token punctuation">.</span><span class="token function">withAudience</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>                    <span class="token comment">// 50 分钟后 token 过期</span></pre></td></tr><tr><td data-num="22"></td><td><pre>                    <span class="token punctuation">.</span><span class="token function">withExpiresAt</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre>                    <span class="token comment">//.withClaim()</span></pre></td></tr><tr><td data-num="24"></td><td><pre>                    <span class="token comment">//.withSubject(userName)</span></pre></td></tr><tr><td data-num="25"></td><td><pre>                    <span class="token comment">//token 的密钥</span></pre></td></tr><tr><td data-num="26"></td><td><pre>                    <span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>algorithm<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>            ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"签名错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="34"></td><td><pre>     * 根据 token 获取 username</pre></td></tr><tr><td data-num="35"></td><td><pre>     * @param token</pre></td></tr><tr><td data-num="36"></td><td><pre>     * @return</pre></td></tr><tr><td data-num="37"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>            <span class="token class-name">String</span> userId <span class="token operator">=</span> <span class="token constant">JWT</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAudience</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>            <span class="token keyword">return</span> userId<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JWTDecodeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">JWTDecodeException</span><span class="token punctuation">(</span><span class="token string">"生成的token 异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="46"></td><td><pre></pre></td></tr><tr><td data-num="47"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="48"></td><td><pre>     * 校验 token 是否有效</pre></td></tr><tr><td data-num="49"></td><td><pre>     * @param token</pre></td></tr><tr><td data-num="50"></td><td><pre>     * @return</pre></td></tr><tr><td data-num="51"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="52"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">checkSign</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>            <span class="token class-name">Algorithm</span> algorithm <span class="token operator">=</span> <span class="token class-name">Algorithm</span><span class="token punctuation">.</span><span class="token function">HMAC256</span><span class="token punctuation">(</span><span class="token constant">SECRET</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>            <span class="token class-name">JWTVerifier</span> verifier <span class="token operator">=</span> <span class="token constant">JWT</span><span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span>algorithm<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="56"></td><td><pre>                    <span class="token comment">// .withClaim("username", username)</span></pre></td></tr><tr><td data-num="57"></td><td><pre>                    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>            <span class="token class-name">DecodedJWT</span> jwt <span class="token operator">=</span> verifier<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JWTVerificationException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"token 无效，请重新获取"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="64"></td><td><pre></pre></td></tr><tr><td data-num="65"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="66"></td><td><pre>        <span class="token comment">// 测试生成 Token 串</span></pre></td></tr><tr><td data-num="67"></td><td><pre>        <span class="token class-name">String</span> strToken <span class="token operator">=</span> <span class="token class-name">JwtTokenUtil</span><span class="token punctuation">.</span><span class="token function">createSign</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="68"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strToken<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="69"></td><td><pre></pre></td></tr><tr><td data-num="70"></td><td><pre>        <span class="token comment">//eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJ6aGFuZ3NhbiIsImV4cCI6MTY1NzA5MzQ3MX0.OdoENj363dPW2YVQfrc4SigoYlt45ydEtkgIc4xzzRo</span></pre></td></tr><tr><td data-num="71"></td><td><pre>        <span class="token comment">// 验证 token 是否有效</span></pre></td></tr><tr><td data-num="72"></td><td><pre>        <span class="token keyword">boolean</span> isValid <span class="token operator">=</span> <span class="token class-name">JwtTokenUtil</span><span class="token punctuation">.</span><span class="token function">checkSign</span><span class="token punctuation">(</span><span class="token string">"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJ6aGFuZ3NhbiIsImV4cCI6MTY1NzA5MzQ3MX0.OdoENj363dPW2YVQfrc4SigoYlt45ydEtkgIc4xzzRo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="73"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>isValid<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="74"></td><td><pre></pre></td></tr><tr><td data-num="75"></td><td><pre>        <span class="token comment">// 从给定的 token 串获取用户信息</span></pre></td></tr><tr><td data-num="76"></td><td><pre>        <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token class-name">JwtTokenUtil</span><span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token string">"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJ6aGFuZ3NhbiIsImV4cCI6MTY1NzA5MzQ3MX0.OdoENj363dPW2YVQfrc4SigoYlt45ydEtkgIc4xzzRo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="77"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="78"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="79"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="2-3-springsecurity整合jwt-返回jwt-token"><a class="anchor" href="#2-3-springsecurity整合jwt-返回jwt-token">#</a> 2-3 SpringSecurity 整合 JWT - 返回 JWT token</h2>
<p><strong>第 1 步，登录认证成功，生成 token 并返回</strong></p>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">*</span><span class="token operator">*</span></pre></td></tr><tr><td data-num="2"></td><td><pre> <span class="token operator">*</span> 自定义认证成功的处理器<span class="token class-name">Handler</span></pre></td></tr><tr><td data-num="3"></td><td><pre> <span class="token operator">*</span><span class="token operator">/</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token annotation punctuation">@Component</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAuthenticationSuccessHandler</span> <span class="token keyword">implements</span> <span class="token class-name">AuthenticationSuccessHandler</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAuthenticationSuccess</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Authentication</span> authentication<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token comment">// 获取当前登录认证成功的用户名</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token class-name">String</span> username <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token class-name">String</span> strToken <span class="token operator">=</span> <span class="token class-name">JwtTokenUtil</span><span class="token punctuation">.</span><span class="token function">createSign</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>            <span class="token comment">// 通过响应的 json 返回客户端</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token class-name">ResponseResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResponseResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>strToken<span class="token punctuation">,</span><span class="token string">"OK"</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            <span class="token class-name">PrintWriter</span> out <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            <span class="token comment">// 将对象转 json 输出</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="19"></td><td><pre>            out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><strong>第 2 步，携带 Token 发送请求</strong></p>
<p>要想使 FilterSecurityInterceptor 过滤器放行:</p>
<figure class="highlight txt"><figcaption data-lang="txt"></figcaption><table><tr><td data-num="1"></td><td><pre>1. Spring Security 上下文（ Context ） 中要有一个 Authentication Token ，且应该是已认证状态。</pre></td></tr><tr><td data-num="2"></td><td><pre>2. Authentication Token 中所包含的 User 的权限信息要满足访问当前 URI 的权限要求。</pre></td></tr></table></figure><p>实现思路:</p>
<p>关键在于：在 FilterSecurityInterceptor 之前 要有一个 Filter 将用户请求中携带的 JWT 转化为 Authentication Token 存在 Spring Security 上下文（ Context ）中给 “后面” 的 FilterSecurityInterceptor 用。</p>
<p>基于上述思路，我们要自定义实现一个 Filter ：</p>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="2"></td><td><pre> *  将用户请求中携带的 JWT 转化为 Authentication Token</pre></td></tr><tr><td data-num="3"></td><td><pre> *  存入 Spring Security 上下文（ Context ）</pre></td></tr><tr><td data-num="4"></td><td><pre> *  表示每次请求只执行该过滤器一次</pre></td></tr><tr><td data-num="5"></td><td><pre> */</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token annotation punctuation">@Component</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtTokenAuthenticationFilter</span> <span class="token keyword">extends</span> <span class="token class-name">OncePerRequestFilter</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token annotation punctuation">@Autowired</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">UserMapper</span> userMapper<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token annotation punctuation">@Autowired</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">MyAuthenticationFailureHandler</span> myAuthenticationFailureHandler<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doFilterInternal</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="16"></td><td><pre>                                    <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="17"></td><td><pre>                                    <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token comment">// 获取当前请求的 uri</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token class-name">String</span> uri <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token comment">// 如果是认证请求</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>uri<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>            <span class="token comment">// 放行</span></pre></td></tr><tr><td data-num="23"></td><td><pre>            filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            <span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre>         <span class="token comment">// 不是认证请求 -- 获取请求中的头部的 token 串</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        <span class="token class-name">String</span> strToken <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"strToken"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>strToken<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>            <span class="token comment">// 抛出自定义异常 -Token 为 null</span></pre></td></tr><tr><td data-num="31"></td><td><pre>            myAuthenticationFailureHandler<span class="token punctuation">.</span><span class="token function">onAuthenticationFailure</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="32"></td><td><pre>                    <span class="token keyword">new</span> <span class="token class-name">TokenIsNullException</span><span class="token punctuation">(</span><span class="token string">"Token为空!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>            <span class="token keyword">return</span> <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>        <span class="token comment">// 不是空，且不是认证请求</span></pre></td></tr><tr><td data-num="36"></td><td><pre>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>            <span class="token comment">// 检验 token 是否有效</span></pre></td></tr><tr><td data-num="38"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">JwtTokenUtil</span><span class="token punctuation">.</span><span class="token function">checkSign</span><span class="token punctuation">(</span>strToken<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>                <span class="token comment">// 获取 token 中的用户名</span></pre></td></tr><tr><td data-num="40"></td><td><pre>                <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token class-name">JwtTokenUtil</span><span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span>strToken<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>                <span class="token comment">// 查询数据库获取用户的权限集</span></pre></td></tr><tr><td data-num="42"></td><td><pre>                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> percodes <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">getPerCodesByPerm</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GrantedAuthority</span><span class="token punctuation">></span></span> authorities <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>                percodes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>percode<span class="token operator">-></span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>                    authorities<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleGrantedAuthority</span><span class="token punctuation">(</span>percode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>                <span class="token comment">// 封装数据库存询的用户信息</span></pre></td></tr><tr><td data-num="48"></td><td><pre>                <span class="token class-name">UsernamePasswordAuthenticationToken</span>  usernamePasswordAuthenticationToken</pre></td></tr><tr><td data-num="49"></td><td><pre>                        <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span>authorities<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre></pre></td></tr><tr><td data-num="51"></td><td><pre>                <span class="token comment">// 存入 securityContext</span></pre></td></tr><tr><td data-num="52"></td><td><pre>                <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAuthentication</span><span class="token punctuation">(</span>usernamePasswordAuthenticationToken<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>                <span class="token comment">// 放行</span></pre></td></tr><tr><td data-num="54"></td><td><pre>                filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>            <span class="token comment">/// 抛出自定义异常  Token 无效</span></pre></td></tr><tr><td data-num="58"></td><td><pre>            myAuthenticationFailureHandler<span class="token punctuation">.</span><span class="token function">onAuthenticationFailure</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="59"></td><td><pre>                    <span class="token keyword">new</span> <span class="token class-name">TokenIsInvalidException</span><span class="token punctuation">(</span><span class="token string">"Token无效!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>然后将过滤器插入到 FilterChainPrxoy 代理的过滤器链中的 UsernamePasswordAuthencationFilter 前面</p>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 将自定义的 JwtTokenAuthenticationFilter 插入到过滤器链中的指定的过滤器前面</span></pre></td></tr><tr><td data-num="2"></td><td><pre>             http<span class="token punctuation">.</span><span class="token function">addFilterBefore</span><span class="token punctuation">(</span>jwtTokenAuthenticationFilter<span class="token punctuation">,</span> <span class="token class-name">UsernamePasswordAuthenticationFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h1 id="3注销成功处理方案"><a class="anchor" href="#3注销成功处理方案">#</a> 3. 注销成功处理方案</h1>
<p>注销成功之后返回登录的页面，逻辑是没有错的，但是在前后端分离的情况下是返回登录页面吗？显然不是，而是返回注销成功的信息</p>
<p>于是，我们再去定制一个 LogoutSuccessHandler</p>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 注销成功的处理器</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token annotation punctuation">@Component</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLogoutSuccessHandler</span> <span class="token keyword">implements</span> <span class="token class-name">LogoutSuccessHandler</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onLogoutSuccess</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>                                <span class="token class-name">Authentication</span> authentication<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token class-name">String</span> headerToken <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"strToken"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"logout header Token:"</span><span class="token operator">+</span>headerToken<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>headerToken<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 如果 token 不是空</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">clearContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 清空上下文 用户名与权限集 UsernamePasswordAuthenticationToken</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token class-name">ResponseResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResponseResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"注销成功"</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json;charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            <span class="token class-name">ResponseResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token class-name">ResponseResult</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">ResultCode</span><span class="token punctuation">.</span><span class="token constant">TOKEN_IS_NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            <span class="token class-name">PrintWriter</span> out<span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将对象转 json 输出</span></pre></td></tr><tr><td data-num="19"></td><td><pre>            out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>WebSecurityConfig 配置类中 配置注销成功处理器</p>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 前后端分离处理注销成功操作</span></pre></td></tr><tr><td data-num="2"></td><td><pre> <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">logoutSuccessHandler</span><span class="token punctuation">(</span>myLogoutSuccessHandler<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 关闭 session 最严格的策略 -JWT 认证的情况下，不需要 security 会话参与</span></pre></td></tr><tr><td data-num="5"></td><td><pre> http<span class="token punctuation">.</span><span class="token function">sessionManagement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sessionCreationPolicy</span><span class="token punctuation">(</span><span class="token class-name">SessionCreationPolicy</span><span class="token punctuation">.</span><span class="token constant">STATELESS</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>图片打包Zip压缩包文件流给前端</title>
    <url>/2023/03/31/%E4%BD%BF%E7%94%A8Zxing%E7%94%9F%E6%88%90%E4%BA%8C%E7%BB%B4%E7%A0%81%E5%B9%B6%E8%BF%94%E5%9B%9E%E7%BB%99%E5%89%8D%E7%AB%AF/</url>
    <content><![CDATA[<h1 id="图片打包zip压缩包文件流给前端"><a class="anchor" href="#图片打包zip压缩包文件流给前端">#</a> 图片打包 Zip 压缩包文件流给前端</h1>
<h6 id="前言"><a class="anchor" href="#前言">#</a> 前言:</h6>
<p>本文实现将图片打包成 zip 流返回给前端，图片来源可以是 OSS 存储中获取的 url 下载，也可以是字节生成的图片字节流，直接打包成 zip 文件给前端</p>
<h4 id="1导入包"><a class="anchor" href="#1导入包">#</a> 1. 导入包</h4>
<pre><code class="language-pom">        &lt;!-- 二维码需要       --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.google.zxing&lt;/groupId&gt;
            &lt;artifactId&gt;core&lt;/artifactId&gt;
            &lt;version&gt;3.4.1&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.google.zxing&lt;/groupId&gt;
            &lt;artifactId&gt;javase&lt;/artifactId&gt;
            &lt;version&gt;3.4.1&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;!-- 图片转换需要       --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework&lt;/groupId&gt;
            &lt;artifactId&gt;spring-test&lt;/artifactId&gt;
            &lt;version&gt;5.3.24&lt;/version&gt;
        &lt;/dependency&gt;
</code></pre>
<h4 id="2工具类"><a class="anchor" href="#2工具类">#</a> 2. 工具类</h4>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>qrcode<span class="token punctuation">.</span>until</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="4"></td><td><pre> * @ClassName QRCodeUtils</pre></td></tr><tr><td data-num="5"></td><td><pre> * @Date 2023/3/29 9:53</pre></td></tr><tr><td data-num="6"></td><td><pre> * @Author legend</pre></td></tr><tr><td data-num="7"></td><td><pre> */</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>zxing<span class="token punctuation">.</span></span><span class="token class-name">BarcodeFormat</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>zxing<span class="token punctuation">.</span></span><span class="token class-name">EncodeHintType</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>zxing<span class="token punctuation">.</span></span><span class="token class-name">MultiFormatWriter</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>zxing<span class="token punctuation">.</span>client<span class="token punctuation">.</span>j2se<span class="token punctuation">.</span></span><span class="token class-name">MatrixToImageWriter</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>zxing<span class="token punctuation">.</span>common<span class="token punctuation">.</span></span><span class="token class-name">BitMatrix</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>zxing<span class="token punctuation">.</span>qrcode<span class="token punctuation">.</span>decoder<span class="token punctuation">.</span></span><span class="token class-name">ErrorCorrectionLevel</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>imageio<span class="token punctuation">.</span></span><span class="token class-name">ImageIO</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>image<span class="token punctuation">.</span></span><span class="token class-name">BufferedImage</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayOutputStream</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Base64</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QRCodeUtils</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="30"></td><td><pre>     * 黑色</pre></td></tr><tr><td data-num="31"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">BLACK</span> <span class="token operator">=</span> <span class="token number">0xFF000000</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="34"></td><td><pre>     * 白色</pre></td></tr><tr><td data-num="35"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">WHITE</span> <span class="token operator">=</span> <span class="token number">0xFFFFFFFF</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="38"></td><td><pre>     * 宽</pre></td></tr><tr><td data-num="39"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="40"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">WIDTH</span> <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="42"></td><td><pre>     * 高</pre></td></tr><tr><td data-num="43"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="44"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">HEIGHT</span> <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre></pre></td></tr><tr><td data-num="46"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="47"></td><td><pre>     * 图片高度增加 60</pre></td></tr><tr><td data-num="48"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="49"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">PIC_HEIGHT</span> <span class="token operator">=</span> <span class="token constant">HEIGHT</span> <span class="token operator">+</span> <span class="token number">120</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre></pre></td></tr><tr><td data-num="51"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="52"></td><td><pre>     * 二维码传图片</pre></td></tr><tr><td data-num="53"></td><td><pre>     *</pre></td></tr><tr><td data-num="54"></td><td><pre>     * @param matrix</pre></td></tr><tr><td data-num="55"></td><td><pre>     * @return</pre></td></tr><tr><td data-num="56"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="57"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">BufferedImage</span> <span class="token function">toBufferedImage</span><span class="token punctuation">(</span><span class="token class-name">BitMatrix</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>        <span class="token keyword">int</span> width <span class="token operator">=</span> matrix<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>        <span class="token keyword">int</span> height <span class="token operator">=</span> matrix<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre></pre></td></tr><tr><td data-num="61"></td><td><pre>        <span class="token class-name">BufferedImage</span> image <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedImage</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> <span class="token constant">PIC_HEIGHT</span><span class="token punctuation">,</span> <span class="token class-name">BufferedImage</span><span class="token punctuation">.</span><span class="token constant">TYPE_INT_RGB</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> width<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> y <span class="token operator">&lt;</span> <span class="token constant">PIC_HEIGHT</span><span class="token punctuation">;</span> y<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>                image<span class="token punctuation">.</span><span class="token function">setRGB</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token constant">WHITE</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="65"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="66"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="67"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> width<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="68"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> y <span class="token operator">&lt;</span> height<span class="token punctuation">;</span> y<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="69"></td><td><pre>                image<span class="token punctuation">.</span><span class="token function">setRGB</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> matrix<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">BLACK</span> <span class="token operator">:</span> <span class="token constant">WHITE</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="70"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="71"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="72"></td><td><pre>        <span class="token keyword">return</span> image<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="73"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="74"></td><td><pre></pre></td></tr><tr><td data-num="75"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="76"></td><td><pre>     * 生成二维码</pre></td></tr><tr><td data-num="77"></td><td><pre>     *</pre></td></tr><tr><td data-num="78"></td><td><pre>     * @param content 扫描二维码的内容</pre></td></tr><tr><td data-num="79"></td><td><pre>     * @param format  图片格式 jpg</pre></td></tr><tr><td data-num="80"></td><td><pre>     *                文件</pre></td></tr><tr><td data-num="81"></td><td><pre>     * @throws Exception</pre></td></tr><tr><td data-num="82"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="83"></td><td><pre>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="84"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">BufferedImage</span> <span class="token function">generateQrCode</span><span class="token punctuation">(</span><span class="token class-name">String</span> content<span class="token punctuation">,</span> <span class="token class-name">String</span> format<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="85"></td><td><pre></pre></td></tr><tr><td data-num="86"></td><td><pre>        <span class="token class-name">MultiFormatWriter</span> multiFormatWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MultiFormatWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="87"></td><td><pre>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"rawtypes"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="88"></td><td><pre>        <span class="token class-name">Map</span> hints <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="89"></td><td><pre>        <span class="token comment">// 设置 UTF-8， 防止中文乱码</span></pre></td></tr><tr><td data-num="90"></td><td><pre>        hints<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">EncodeHintType</span><span class="token punctuation">.</span><span class="token constant">CHARACTER_SET</span><span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="91"></td><td><pre>        <span class="token comment">// 设置二维码四周白色区域的大小</span></pre></td></tr><tr><td data-num="92"></td><td><pre>        hints<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">EncodeHintType</span><span class="token punctuation">.</span><span class="token constant">MARGIN</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="93"></td><td><pre>        <span class="token comment">// 设置二维码的容错性</span></pre></td></tr><tr><td data-num="94"></td><td><pre>        hints<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">EncodeHintType</span><span class="token punctuation">.</span><span class="token constant">ERROR_CORRECTION</span><span class="token punctuation">,</span> <span class="token class-name">ErrorCorrectionLevel<span class="token punctuation">.</span>H</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="95"></td><td><pre>        <span class="token comment">// 画二维码</span></pre></td></tr><tr><td data-num="96"></td><td><pre>        <span class="token class-name">BitMatrix</span> bitMatrix <span class="token operator">=</span> multiFormatWriter<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token class-name">BarcodeFormat</span><span class="token punctuation">.</span><span class="token constant">QR_CODE</span><span class="token punctuation">,</span> <span class="token constant">WIDTH</span><span class="token punctuation">,</span> <span class="token constant">HEIGHT</span><span class="token punctuation">,</span> hints<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="97"></td><td><pre>        <span class="token class-name">BufferedImage</span> image <span class="token operator">=</span> <span class="token function">toBufferedImage</span><span class="token punctuation">(</span>bitMatrix<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="98"></td><td><pre>        <span class="token keyword">return</span> image<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="99"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="100"></td><td><pre></pre></td></tr><tr><td data-num="101"></td><td><pre></pre></td></tr><tr><td data-num="102"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="103"></td><td><pre>     * 把生成的图片写到指定路径</pre></td></tr><tr><td data-num="104"></td><td><pre>     *</pre></td></tr><tr><td data-num="105"></td><td><pre>     * @param qrcFile       路径</pre></td></tr><tr><td data-num="106"></td><td><pre>     * @param qrCodeContent 二维码内容</pre></td></tr><tr><td data-num="107"></td><td><pre>     * @param pressText     增加的文字</pre></td></tr><tr><td data-num="108"></td><td><pre>     * @throws Exception</pre></td></tr><tr><td data-num="109"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="110"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">generateQrCodeByPath</span><span class="token punctuation">(</span><span class="token class-name">File</span> qrcFile<span class="token punctuation">,</span> <span class="token class-name">String</span> qrCodeContent<span class="token punctuation">,</span> <span class="token class-name">String</span> pressText<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="111"></td><td><pre></pre></td></tr><tr><td data-num="112"></td><td><pre></pre></td></tr><tr><td data-num="113"></td><td><pre>        <span class="token class-name">BufferedImage</span> image <span class="token operator">=</span> <span class="token function">generateQrCode</span><span class="token punctuation">(</span>qrCodeContent<span class="token punctuation">,</span> <span class="token string">"jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="114"></td><td><pre></pre></td></tr><tr><td data-num="115"></td><td><pre>        <span class="token class-name">Graphics</span> g <span class="token operator">=</span> image<span class="token punctuation">.</span><span class="token function">getGraphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="116"></td><td><pre>        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Graphics2D</span><span class="token punctuation">)</span> g<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setRenderingHint</span><span class="token punctuation">(</span><span class="token class-name">RenderingHints</span><span class="token punctuation">.</span><span class="token constant">KEY_ANTIALIASING</span><span class="token punctuation">,</span> <span class="token class-name">RenderingHints</span><span class="token punctuation">.</span><span class="token constant">VALUE_ANTIALIAS_ON</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="117"></td><td><pre></pre></td></tr><tr><td data-num="118"></td><td><pre>        <span class="token comment">// 设置字体，大小</span></pre></td></tr><tr><td data-num="119"></td><td><pre>        <span class="token class-name">Font</span> font <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span><span class="token string">"黑体"</span><span class="token punctuation">,</span> <span class="token class-name">Font</span><span class="token punctuation">.</span><span class="token constant">PLAIN</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="120"></td><td><pre>        g<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>font<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="121"></td><td><pre>        g<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>black<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="122"></td><td><pre>        <span class="token class-name">FontMetrics</span> metrics <span class="token operator">=</span> g<span class="token punctuation">.</span><span class="token function">getFontMetrics</span><span class="token punctuation">(</span>font<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="123"></td><td><pre>        <span class="token comment">// 文字在图片中的坐标 这里设置在中间</span></pre></td></tr><tr><td data-num="124"></td><td><pre>        <span class="token keyword">int</span> startX <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token constant">WIDTH</span> <span class="token operator">-</span> metrics<span class="token punctuation">.</span><span class="token function">stringWidth</span><span class="token punctuation">(</span>pressText<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="125"></td><td><pre>        <span class="token comment">//  int startY=HEIGHT+(PIC_HEIGHT-HEIGHT)/2;  // 文字在二维码上面</span></pre></td></tr><tr><td data-num="126"></td><td><pre>        <span class="token keyword">int</span> startY <span class="token operator">=</span> <span class="token constant">PIC_HEIGHT</span> <span class="token operator">-</span> <span class="token constant">HEIGHT</span><span class="token punctuation">;</span>  <span class="token comment">// 文字在二维码下面</span></pre></td></tr><tr><td data-num="127"></td><td><pre>        g<span class="token punctuation">.</span><span class="token function">drawString</span><span class="token punctuation">(</span>pressText<span class="token punctuation">,</span> startX<span class="token punctuation">,</span> startY<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="128"></td><td><pre></pre></td></tr><tr><td data-num="129"></td><td><pre>        g<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="130"></td><td><pre>        image<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="131"></td><td><pre>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="132"></td><td><pre>            <span class="token class-name">ImageIO</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token string">"jpg"</span><span class="token punctuation">,</span> qrcFile<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="133"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="134"></td><td><pre>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="135"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="136"></td><td><pre></pre></td></tr><tr><td data-num="137"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="138"></td><td><pre></pre></td></tr><tr><td data-num="139"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="140"></td><td><pre>     * 把生成的图片返回到前端</pre></td></tr><tr><td data-num="141"></td><td><pre>     *</pre></td></tr><tr><td data-num="142"></td><td><pre>     * @param qrCodeContent 二维码内容</pre></td></tr><tr><td data-num="143"></td><td><pre>     * @throws Exception</pre></td></tr><tr><td data-num="144"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="145"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">BufferedImage</span> <span class="token function">generateQrCodeBack</span><span class="token punctuation">(</span> <span class="token class-name">String</span> qrCodeContent<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="146"></td><td><pre></pre></td></tr><tr><td data-num="147"></td><td><pre></pre></td></tr><tr><td data-num="148"></td><td><pre>        <span class="token class-name">BufferedImage</span> image <span class="token operator">=</span> <span class="token function">generateQrCode</span><span class="token punctuation">(</span>qrCodeContent<span class="token punctuation">,</span> <span class="token string">"jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="149"></td><td><pre></pre></td></tr><tr><td data-num="150"></td><td><pre>        <span class="token class-name">Graphics</span> g <span class="token operator">=</span> image<span class="token punctuation">.</span><span class="token function">getGraphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="151"></td><td><pre>        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Graphics2D</span><span class="token punctuation">)</span> g<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setRenderingHint</span><span class="token punctuation">(</span><span class="token class-name">RenderingHints</span><span class="token punctuation">.</span><span class="token constant">KEY_ANTIALIASING</span><span class="token punctuation">,</span> <span class="token class-name">RenderingHints</span><span class="token punctuation">.</span><span class="token constant">VALUE_ANTIALIAS_ON</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="152"></td><td><pre>        image<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="153"></td><td><pre>        <span class="token keyword">return</span> image<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="154"></td><td><pre></pre></td></tr><tr><td data-num="155"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="156"></td><td><pre></pre></td></tr><tr><td data-num="157"></td><td><pre></pre></td></tr><tr><td data-num="158"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="159"></td><td><pre>     * 生成二维码并使用 Base64 编码</pre></td></tr><tr><td data-num="160"></td><td><pre>     *</pre></td></tr><tr><td data-num="161"></td><td><pre>     * @param content 二维码内容</pre></td></tr><tr><td data-num="162"></td><td><pre>     * @return 返回 base64 图片</pre></td></tr><tr><td data-num="163"></td><td><pre>     * @throws Exception</pre></td></tr><tr><td data-num="164"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="165"></td><td><pre>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="166"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getBase64QRCode</span><span class="token punctuation">(</span><span class="token class-name">String</span> content<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="167"></td><td><pre></pre></td></tr><tr><td data-num="168"></td><td><pre></pre></td></tr><tr><td data-num="169"></td><td><pre>        <span class="token class-name">String</span> format <span class="token operator">=</span> <span class="token string">"png"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="170"></td><td><pre></pre></td></tr><tr><td data-num="171"></td><td><pre>        <span class="token class-name">MultiFormatWriter</span> multiFormatWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MultiFormatWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="172"></td><td><pre>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"rawtypes"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="173"></td><td><pre>        <span class="token class-name">Map</span> hints <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="174"></td><td><pre></pre></td></tr><tr><td data-num="175"></td><td><pre>        <span class="token comment">// 设置二维码四周白色区域的大小</span></pre></td></tr><tr><td data-num="176"></td><td><pre>        hints<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">EncodeHintType</span><span class="token punctuation">.</span><span class="token constant">MARGIN</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="177"></td><td><pre>        <span class="token comment">// 设置二维码的容错性</span></pre></td></tr><tr><td data-num="178"></td><td><pre>        hints<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">EncodeHintType</span><span class="token punctuation">.</span><span class="token constant">ERROR_CORRECTION</span><span class="token punctuation">,</span> <span class="token class-name">ErrorCorrectionLevel<span class="token punctuation">.</span>H</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="179"></td><td><pre>        <span class="token comment">// 画二维码</span></pre></td></tr><tr><td data-num="180"></td><td><pre>        <span class="token class-name">BitMatrix</span> bitMatrix <span class="token operator">=</span> multiFormatWriter<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token class-name">BarcodeFormat</span><span class="token punctuation">.</span><span class="token constant">QR_CODE</span><span class="token punctuation">,</span> <span class="token constant">WIDTH</span><span class="token punctuation">,</span> <span class="token constant">HEIGHT</span><span class="token punctuation">,</span> hints<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="181"></td><td><pre>        <span class="token class-name">BufferedImage</span> image <span class="token operator">=</span> <span class="token class-name">MatrixToImageWriter</span><span class="token punctuation">.</span><span class="token function">toBufferedImage</span><span class="token punctuation">(</span>bitMatrix<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="182"></td><td><pre></pre></td></tr><tr><td data-num="183"></td><td><pre>        <span class="token class-name">ByteArrayOutputStream</span> os <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 新建流。</span></pre></td></tr><tr><td data-num="184"></td><td><pre>        <span class="token class-name">ImageIO</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> format<span class="token punctuation">,</span> os<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 利用 ImageIO 类提供的 write 方法，将 bi 以 png 图片的数据模式写入流。</span></pre></td></tr><tr><td data-num="185"></td><td><pre>        <span class="token keyword">byte</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 从流中获取数据数组。</span></pre></td></tr><tr><td data-num="186"></td><td><pre>        <span class="token class-name">String</span> base64String <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="187"></td><td><pre></pre></td></tr><tr><td data-num="188"></td><td><pre>        <span class="token comment">// Base64 编码</span></pre></td></tr><tr><td data-num="189"></td><td><pre>        <span class="token keyword">return</span> base64String<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="190"></td><td><pre></pre></td></tr><tr><td data-num="191"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="192"></td><td><pre></pre></td></tr><tr><td data-num="193"></td><td><pre></pre></td></tr><tr><td data-num="194"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h4 id="3生成二维码代码片段"><a class="anchor" href="#3生成二维码代码片段">#</a> 3. 生成二维码 (代码片段)</h4>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> uuid <span class="token operator">:</span> uuidArray<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>                        <span class="token comment">// 使用 zxing 生成二维码</span></pre></td></tr><tr><td data-num="3"></td><td><pre>                        bufferedImage <span class="token operator">=</span> <span class="token class-name">QRCodeUtils</span><span class="token punctuation">.</span><span class="token function">generateQrCodeBack</span><span class="token punctuation">(</span>uuid<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>                        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"二维码生成成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>                        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token function">imageToBytes</span><span class="token punctuation">(</span>bufferedImage<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>                        <span class="token comment">//MockMultipartFile 需要导入 spring-test 的依赖包</span></pre></td></tr><tr><td data-num="7"></td><td><pre>                        <span class="token comment">/* 这里自定义流程 可以将图片上传到 OSS 也可以直接获取生成的图片输出</pre></td></tr><tr><td data-num="8"></td><td><pre>                        *  本段代码实现的是直接将图片输出</pre></td></tr><tr><td data-num="9"></td><td><pre>                        * */</span></pre></td></tr><tr><td data-num="10"></td><td><pre>                        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>uuid<span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>                        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>                    <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h4 id="4将图片打包成zip代码片段"><a class="anchor" href="#4将图片打包成zip代码片段">#</a> 4. 将图片打包成 zip (代码片段)</h4>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> entry <span class="token operator">:</span> hashMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>                        <span class="token comment">// 获取到 oss 的图片路径，使用上传到 Oss 放开这两行代码</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">//                        URL url = new URL(entry.getValue());</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">//                        imageInputStream = url.openStream();</span></pre></td></tr></table></figure><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre>imageInputStream<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>                    <span class="token comment">// 二维码图片名称</span></pre></td></tr><tr><td data-num="3"></td><td><pre>                    <span class="token class-name">ZipEntry</span> zipEntry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipEntry</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>                    zipOutputStream<span class="token punctuation">.</span><span class="token function">putNextEntry</span><span class="token punctuation">(</span>zipEntry<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>                    <span class="token keyword">int</span> len<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>                    <span class="token comment">// 定义每次读取的字节数组</span></pre></td></tr><tr><td data-num="7"></td><td><pre>                    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"开始写入zip"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> imageInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>                        zipOutputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>                    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h4 id="5将图片转换成字节数组"><a class="anchor" href="#5将图片转换成字节数组">#</a> 5. 将图片转换成字节数组</h4>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">imageToBytes</span><span class="token punctuation">(</span><span class="token class-name">BufferedImage</span> bImg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>        <span class="token class-name">ByteArrayOutputStream</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>            <span class="token class-name">ImageIO</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bImg<span class="token punctuation">,</span> <span class="token string">"jpg"</span><span class="token punctuation">,</span> out<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"转成字节数组异常"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">return</span> out<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>分布式系统</title>
    <url>/2022/09/07/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<figure class="highlight yaml"><figcaption data-lang="YAML"><span>l</span></figcaption><table><tr><td data-num="1"></td><td><pre>&lt;<span class="token tag">!--swig</span>￼0<span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">></span></pre></td></tr></table></figure><h1 id="分布式系统"><a class="anchor" href="#分布式系统">#</a> 分布式系统</h1>
<h2 id="概论"><a class="anchor" href="#概论">#</a> 概论</h2>
<ul>
<li>分布式 CAP 理论</li>
<li>分布式 BASE 理论</li>
<li>seata 在 windows 下的安装</li>
</ul>
<h3 id="cap"><a class="anchor" href="#cap">#</a> CAP</h3>
<p>CAP 理论是分布式系统、特别是分布式存储领域中被讨论的最多的理论。其中 C 代表一致性 (Consistency)，A 代表可用性 (Availability)，P 代表分区容错性 (Partition tolerance)。CAP 理论告诉我们 C、A、P 三者不能同时满足，最多只能满足其中两个。</p>
<p>&lt;img src=&quot;C:\Users\14023\AppData\Roaming\Typora\typora-user-images\image-20220907131016759.png&quot; alt=&quot;image-20220907131016759&quot; style=&quot;zoom:50%;&quot; /&gt;</p>
<p>1998 年，加州大学的计算机科学家 Eric Brewer 提出，分布式系统有三个指标。</p>
<table>
<thead>
<tr>
<th>指标</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>C</strong>onsistency（一致性）</td>
<td>all nodes see the same data at the same time</td>
</tr>
<tr>
<td></td>
<td>在更新操作成功并返回客户端完成后，所有节点在同一个时间的数据完全一致。</td>
</tr>
<tr>
<td></td>
<td>这里的一致性是指强一致性。一般关系型数据库就具有强一致性特性。</td>
</tr>
<tr>
<td><strong>A</strong>vailability（可用性）</td>
<td>Reads and writes always succeed</td>
</tr>
<tr>
<td></td>
<td>服务一直可用，而且是正常响应时间。</td>
</tr>
<tr>
<td><strong>P</strong>artition tolerance （分区容错性）</td>
<td>the system continues to operate despite arbirary message loss or failure of part of the system</td>
</tr>
<tr>
<td></td>
<td>分布式系统在遇到某节点或网络分区故障时，仍然能够对外提供满足一致性和可用性的服务。</td>
</tr>
</tbody>
</table>
<p>Eric Brewer 指出，这三个指标不可能同时做到。这个结论就叫做 CAP 定理。由于 CAP 三需求无法同时满足，因此在设计分布式系统时就必须有所取舍。</p>
<p>由于网络并非 100% 可靠，因此分布式系统必须实现分区容错性，所以，系统架构师权衡取舍的也就只有 C（ 一致性 ）和 A（ 可用性 ），即，CP 还是 AP 。</p>
<ul>
<li>
<p>如果此时要保证<strong>一致性</strong>，就必须等待网络恢复，完成数据同步后，整个集群才对外提供服务，服务处于阻塞状态，不可用。<br />
CP ，即实现一致性和分区容错性。此组合为数据强一致性模式，即，要求在多服务之间数据一定要一致，弱化了可用性。一些对数据要求比较高的场景（ 比如金融业务 ）常使用此模式。这种模式性能较低。Seata AT 模式的 “读已提交” 级别就是这种模式。</p>
</li>
<li>
<p>如果此时要保证<strong>可用性</strong>，就不能等待网络恢复，那节点之间就会出现数据不一致。<br />
AP，即实现可用性和分区容错性。此组合为数据最终一致性，即，要求所有服务器都可用，弱化了一致性。互联网分布式服务多数基于 AP 。这种模式性能较高，可满足高并发业务需求。基于消息的最终一致性就是这种模式。</p>
</li>
</ul>
<p>也就是说，在 P 一定会出现的情况下，A 和 C 之间只能实现一个。</p>
<h4 id="cap-三选二"><a class="anchor" href="#cap-三选二">#</a> CAP 三选二</h4>
<ul>
<li><code>一致性 (Consistency)</code> : 一个写操作返回成功，那么之后的读请求都必须读到这个新数据；如果返回失败，那么所有读操作都不能读到这个数据。所有节点访问同一份最新的数据。</li>
<li><code>可用性 (Availability)</code> : 对数据更新具备高可用性，请求能够及时处理，不会一直等待，即使出现节点失效。</li>
<li><code>分区容错性 (Partition tolerance)</code> : 能容忍网络分区，在网络断开的情况下，被分隔的节点仍能正常对外提供服务。</li>
</ul>
<h3 id="base"><a class="anchor" href="#base">#</a> BASE</h3>
<h4 id="什么是base"><a class="anchor" href="#什么是base">#</a> 什么是 BASE</h4>
<p>eBay 的架构师 Dan Pritchett 源于对大规模分布式系统的实践总结，在 ACM 上发表文章提出 BASE 理论，BASE 理论是对 CAP 理论的延伸，<em><strong>核心思想</strong></em>是即使无法做到强一致性（Strong Consistency，CAP 的一致性就是强一致性），但应用可以采用适合的方式达到最终一致性（Eventual Consitency）。</p>
<h4 id="基本思想"><a class="anchor" href="#基本思想">#</a> 基本思想</h4>
<p>BASE 理论包含三个思想：</p>
<ul>
<li>
<p><strong>B</strong>asically <strong>A</strong>vailable（基本可用）：分布式系统在出现故障时，允许损失部分可用性，即保证核心可用。</p>
</li>
<li>
<p><strong>S</strong>oft State（软状态）：在一定时间内，允许出现中间状态，比如临时的不一致状态。</p>
</li>
<li>
<p><strong>E</strong>ventually Consistent（最终一致性）：虽然无法保证强一致性，但是在软状态结束后，最终达到数据一致。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
</search>
